name: DAST com ZAP

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]

jobs:
  dast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Build da imagem Flask
        run: docker build -t flask-app .

      - name: Salvar imagem para usar como serviço
        run: |
          docker save flask-app > flask-app.tar

      - name: Carregar imagem no contexto do serviço
        uses: actions/upload-artifact@v4
        with:
          name: flask-image
          path: flask-app.tar

  zap:
    runs-on: ubuntu-latest

    needs: dast

    services:
      flask-app:
        image: flask-app:latest
        ports:
          - 5000:5000
        options: >-
          --health-cmd "curl http://localhost:5000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Baixar imagem Flask
        uses: actions/download-artifact@v4
        with:
          name: flask-image

      - name: Carregar imagem Flask no Docker
        run: docker load < flask-app.tar

      - name: Criar pasta de relatórios com permissões adequadas
        run: |
          mkdir -p zap_reports
          chmod 777 zap_reports

      - name: Rodar ZAP Scan contra o app Flask
        run: |
          docker run --rm \
            -v $(pwd)/zap_reports:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://flask-app:5000 \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html \
            -a

      - name: Upload do relatório HTML
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_reports/report_html.html
